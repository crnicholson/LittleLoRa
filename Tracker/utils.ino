void printGPSData() {
  if (gps.getPVT()) {
    Serial.print("Lat: ");
    Serial.print(gps.getLatitude());
    Serial.print(" Lon: ");
    Serial.print(gps.getLongitude());
    Serial.print(" Date/Time: ");
    Serial.print(gps.getYear());
    Serial.print("-");
    Serial.print(gps.getMonth());
    Serial.print("-");
    Serial.print(gps.getDay());
    Serial.print(" ");
    Serial.print(gps.getHour());
    Serial.print(":");
    Serial.print(gps.getMinute());
    Serial.print(":");
    Serial.println(gps.getSecond());
  }
}

void gpsWakeup() {
  digitalWrite(WAKEUP_PIN, LOW);
  delay(1000);
  digitalWrite(WAKEUP_PIN, HIGH);
  delay(1000);
  digitalWrite(WAKEUP_PIN, LOW);
}

void sendI2CData(byte data[]) {
  Wire.beginTransmission(0x42);  // Start transmission to GPS.
  for (int i = 0; i < sizeof(data); i++) {
    Wire.write(data[i]);  // Send data byte by byte.
  }
  Wire.endTransmission();  // End transmission.
}

/*
void gpsSleep() {
  // Sleep for 10 seconds
  byte UBLOX_RXM_PMREQ[] = {
    0xB5, 0x62, 0x02, 0x41, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xF0, 0x38
  };
  sendI2CData(UBLOX_RXM_PMREQ);
}
*/

void gpsConfig() {
  byte data1[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x01, 0x00, 0x00, 0x18, 0x00, 0x31, 0x10, 0x01, 0xF5, 0x66 };
  byte data2[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x02, 0x00, 0x00, 0x18, 0x00, 0x31, 0x10, 0x01, 0xF6, 0x6E };
  byte data3[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x01, 0x00, 0x00, 0x21, 0x00, 0x31, 0x10, 0x00, 0xFD, 0x92 };
  byte data4[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x02, 0x00, 0x00, 0x21, 0x00, 0x31, 0x10, 0x00, 0xFE, 0x9A };
  byte data5[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x01, 0x00, 0x00, 0x20, 0x00, 0x31, 0x10, 0x00, 0xFC, 0x8D };
  byte data6[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x02, 0x00, 0x00, 0x20, 0x00, 0x31, 0x10, 0x00, 0xFD, 0x95 };
  byte data7[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x01, 0x00, 0x00, 0x21, 0x00, 0x11, 0x20, 0x03, 0xF0, 0x55 };
  byte data8[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x02, 0x00, 0x00, 0x21, 0x00, 0x11, 0x20, 0x03, 0xF1, 0x5D };
  byte data9[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x01, 0x00, 0x00, 0x05, 0x00, 0x22, 0x20, 0x00, 0xE2, 0xF9 };
  byte data10[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x02, 0x00, 0x00, 0x05, 0x00, 0x22, 0x20, 0x00, 0xE3, 0x01 };
  byte data11[] = { 0xB5, 0x62, 0x06, 0x8A, 0x0A, 0x00, 0x01, 0x01, 0x00, 0x00, 0xB3, 0x00, 0x11, 0x30, 0x1E, 0x00, 0xAE, 0x23 };
  byte data12[] = { 0xB5, 0x62, 0x06, 0x8A, 0x0A, 0x00, 0x01, 0x02, 0x00, 0x00, 0xB3, 0x00, 0x11, 0x30, 0x1E, 0x00, 0xAF, 0x2C };
  byte data13[] = { 0xB5, 0x62, 0x06, 0x8A, 0x0C, 0x00, 0x01, 0x01, 0x00, 0x00, 0x02, 0x00, 0xD0, 0x40, 0x3C, 0x00, 0x00, 0x00, 0xEC, 0x55 };
  byte data14[] = { 0xB5, 0x62, 0x06, 0x8A, 0x0C, 0x00, 0x01, 0x02, 0x00, 0x00, 0x02, 0x00, 0xD0, 0x40, 0x3C, 0x00, 0x00, 0x00, 0xED, 0x60 };
  byte data15[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0xD0, 0x20, 0x01, 0x8D, 0xF0 };
  byte data16[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x02, 0x00, 0x00, 0x01, 0x00, 0xD0, 0x20, 0x01, 0x8E, 0xF8 };
  byte data17[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x01, 0x00, 0x00, 0x25, 0x00, 0x31, 0x10, 0x00, 0x01, 0xA6 };
  byte data18[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x01, 0x00, 0x00, 0x06, 0x00, 0x91, 0x20, 0x01, 0x53, 0x4C };
  byte data19[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x02, 0x00, 0x00, 0x06, 0x00, 0x91, 0x20, 0x01, 0x54, 0x54 };
  byte data20[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x01, 0x00, 0x00, 0x15, 0x00, 0x91, 0x20, 0x01, 0x62, 0x97 };
  byte data21[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x02, 0x00, 0x00, 0x15, 0x00, 0x91, 0x20, 0x01, 0x63, 0x9F };
  byte data22[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x01, 0x00, 0x00, 0x1A, 0x00, 0x91, 0x20, 0x01, 0x67, 0xB0 };
  byte data23[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x02, 0x00, 0x00, 0x1A, 0x00, 0x91, 0x20, 0x01, 0x68, 0xB8 };
  byte data24[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x01, 0x00, 0x00, 0x21, 0x00, 0x11, 0x20, 0x06, 0xF3, 0x58 };
  byte data25[] = { 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x01, 0x02, 0x00, 0x00, 0x21, 0x00, 0x11, 0x20, 0x06, 0xF4, 0x60 };

  sendI2CData(data1);
  sendI2CData(data2);
  sendI2CData(data3);
  sendI2CData(data4);
  sendI2CData(data5);
  sendI2CData(data6);
  sendI2CData(data7);
  sendI2CData(data8);
  sendI2CData(data9);
  sendI2CData(data10);
  sendI2CData(data11);
  sendI2CData(data12);
  sendI2CData(data13);
  sendI2CData(data14);
  sendI2CData(data15);
  sendI2CData(data16);
  sendI2CData(data17);
  sendI2CData(data18);
  sendI2CData(data19);
  sendI2CData(data20);
  sendI2CData(data21);
  sendI2CData(data22);
  sendI2CData(data23);
  sendI2CData(data24);
  sendI2CData(data25);
}

void transmit(const struct __attribute__((packed)) dataStruct &data) {
  // Send the packet over LoRa.
  LoRa.beginPacket();
  LoRa.write((byte *)&data, sizeof(data));
  LoRa.endPacket(); 
}
